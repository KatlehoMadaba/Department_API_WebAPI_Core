using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Abp.Domain.Repositories;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyFirstProj.Domain;
using MyFirstProj.Services.PersonServices.Dto;
using MyFirstProj.Services.PersonServices.DTO;

namespace MyFirstProj.Services.PersonServices
{
    public class PersonAppService :MyFirstProjAppServiceBase,IPersonAppService
    {
        private readonly IRepository<Person, Guid> _personRepository;

        public PersonAppService(IRepository<Person, Guid> personRepository)
        {
            _personRepository = personRepository;
        }
        [HttpPost]
        public async Task<PersonsDTO> CreatePersonAsync(PersonRequestDto input)
        {
            //The input parameter Person is being mapped to the Person class using the ObjectMapper
            //Making sure that the incoming object (input) is properly converted or processed into the format expected by the repository
            var person=ObjectMapper.Map<Person>(input);

            //Save the Person object that has just been convert to be saved into the Database 
            //The  InsertAsync method of  _personRepository is called to insert the newly created Person object into the database.
            //Since this is asynchronous, the method waits () for the operation to complete and updates the  variable with the newly
            //saved entity (which might now include additional data like an autogenerated ID).
            person = await _personRepository.InsertAsync(person); 

            //save changes to the database
            //The Unit of Work pattern is often used to manage and coordinate database transactions, ensuring consistency and integrity.
            await CurrentUnitOfWork.SaveChangesAsync();

            //Once the  object is successfully saved in the database, it is mapped to the  class using .
            //This DTO typically contains only the necessary fields (such as ID, name, etc.) that should be sent back to the caller, instead of exposing the entire  entity.
            return ObjectMapper.Map<PersonsDTO>(person);
            //returns the dto
        }
        public async Task<List<PersonsDTO>> Getall()
        {
            //This function is used to generate a query that returns the an Iquery of all the users that exist 
            var personsQuery = await _personRepository.GetAllAsync();
            //We are now using the query returned and want the information in the user entity to be included and by doing that we return a list that has 
            //both the person information as well as the user information.
            var persons = personsQuery.Include(p => p.User);

            //Mapping the persons list into the personsDto
            return ( ObjectMapper.Map<List<PersonsDTO>>(persons) );
        }
    }
}
